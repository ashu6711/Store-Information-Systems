//hello world, checking the clone request
import java.awt.Color;
import java.awt.Container;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import static java.lang.Integer.parseInt;
import static java.lang.Integer.parseInt;
import java.lang.reflect.Array;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.PatternSyntaxException;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Deepika Kattel
 */
public class MotoRacers extends javax.swing.JFrame {
     //declaring success image and input image
    ImageIcon icon_success = new ImageIcon("checked.png");
    ImageIcon icon_input = new ImageIcon("input.png");
    /**
     * Creates new form MotoRacers
     */
    public MotoRacers() {

        
        initComponents();
        //creating 2d array of object for setting the dummy data in the jTable
        Object[][] defaultValue = {
            {"MX0021", "Benelli TNT 300", "Benelli", "300 cc", "Oil Cooled", "680000"},
            {"BN125", "Benelli TNT 125", "Benelli", "125 cc", "liquid cooled", "425000"},
            {"YB1006", "Yamaha R15", "Yamaha", "150 cc", "Oil cooled", "500000"},
            {"SUKI200", "Gixer 150", "Suzuki", "150 cc", "Air cooled", "100000"},
            {"CRF250L", "CRF", "Honda", "250 cc", "Liquid cooled", "1100000"},
            {"BW1290", "Pulser 200 NS", "Bajaj", "250 cc", "Liquid cooled", "300000"},
            {"DU599", "Scambler 599", "Ducati", "600 cc", "Liquid cooled", "1200000"},
            {"BJ200", "Pulser 200 AS", "Bajaj", "200 cc", "Liquid cooled", "5250000"},
            {"YRO9394", "Yahama R3", "Yamaha", "300 cc", "Liquid cooled", "900000"},
            {"BJ12030", "Pulser 200 RS", "Bajaj", "200 cc", "Oil cooled", "300000"}
        };
        
        DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();
        //setting the default values in the jTable 
        for (int i = 0; i < defaultValue.length; i++) {
            model1.addRow(defaultValue[i]);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cooling = new javax.swing.ButtonGroup();
        fileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        model_num = new javax.swing.JTextField();
        displacement = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        coolAir = new javax.swing.JRadioButton();
        coolOil = new javax.swing.JRadioButton();
        coolLiquid = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        model_name = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        company1 = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        searchBar = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        delete1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        companyCmb = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        itemOpen = new javax.swing.JMenuItem();
        itemexit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuHelp = new javax.swing.JMenuItem();

        fileChooser.setPreferredSize(new java.awt.Dimension(700, 600));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 102, 102));

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel2.setText("Model number:");

        model_num.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        model_num.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        model_num.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                model_numActionPerformed(evt);
            }
        });

        displacement.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        displacement.setForeground(new java.awt.Color(1, 1, 1));
        displacement.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-", "100 CC", "125 CC", "150 CC", "180 CC", "200 CC", "300 CC", "400 CC", "500 CC" }));
        displacement.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        displacement.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                displacementItemStateChanged(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel3.setText("Displacement:");

        coolAir.setBackground(new java.awt.Color(0, 153, 153));
        cooling.add(coolAir);
        coolAir.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        coolAir.setText("Air cooled");
        coolAir.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        coolOil.setBackground(new java.awt.Color(0, 153, 153));
        cooling.add(coolOil);
        coolOil.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        coolOil.setText("Oil cooled");
        coolOil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coolOilActionPerformed(evt);
            }
        });

        coolLiquid.setBackground(new java.awt.Color(0, 153, 153));
        cooling.add(coolLiquid);
        coolLiquid.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        coolLiquid.setText("Liquid cooled");
        coolLiquid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coolLiquidActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel4.setText("Cooling system:");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel5.setText("Company:");

        btnAdd.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.setBorder(null);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel1.setText("Model name:");

        model_name.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        model_name.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jLabel6.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorbike.png"))); // NOI18N

        price.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        price.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel7.setText("Price:");

        company1.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        company1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-", "Suzuki", "Honda", "Bajaj", "KTM", "Benelli", "BMW", "Ducati", "Yahama" }));
        company1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(coolLiquid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(model_name)
                            .addComponent(model_num)
                            .addComponent(displacement, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(coolAir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(coolOil, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClear)
                                .addGap(31, 31, 31)
                                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(company1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(model_num, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(model_name, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(displacement, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(coolAir)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(coolOil)
                .addGap(18, 18, 18)
                .addComponent(coolLiquid)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(company1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
        );

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jTable1.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Model number", "Model name", "Company", "Displacement", "Cooling system", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAlignmentX(1.0F);
        jTable1.setAlignmentY(1.0F);
        jTable1.setIntercellSpacing(new java.awt.Dimension(3, 3));
        jTable1.setRowHeight(32);
        jTable1.setSelectionBackground(new java.awt.Color(153, 204, 0));
        jScrollPane1.setViewportView(jTable1);

        btnUpdate.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        searchBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorbike.png"))); // NOI18N
        jLabel8.setText("Moto Racers");

        delete1.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        delete1.setText("Delete");
        delete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete1ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel9.setText("Sort by :");

        companyCmb.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        companyCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Suzuki", "Honda", "Bajaj", "KTM", "Benelli", "BMW", "Ducati", "Yahama" }));
        companyCmb.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        companyCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                companyCmbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(35, 35, 35)
                .addComponent(companyCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(delete1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(203, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(companyCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delete1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
        );

        jMenuBar1.setMaximumSize(new java.awt.Dimension(200, 32769));
        jMenuBar1.setPreferredSize(new java.awt.Dimension(80, 40));

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        itemOpen.setText("Open");
        itemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemOpenActionPerformed(evt);
            }
        });
        jMenu1.add(itemOpen);

        itemexit.setText("Exit");
        itemexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemexitActionPerformed(evt);
            }
        });
        jMenu1.add(itemexit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        menuHelp.setText("Help file");
        menuHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuHelpActionPerformed(evt);
            }
        });
        jMenu2.add(menuHelp);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void model_numActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_model_numActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_model_numActionPerformed

    private void coolOilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coolOilActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coolOilActionPerformed

    private void coolLiquidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coolLiquidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coolLiquidActionPerformed
    
    //Method to add data in the table  
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        //Fetching the data entered in the text fields
        String model_number1 = model_num.getText();
        String model_name1 = model_name.getText();
        String price1;
        int price2 = 0;
        String price3 = "";
        //Validating ther user input data and adding to the table
        if (!model_number1.equals("")) {
            if (!model_name1.equals("")) {
                if (displacement.getSelectedIndex() != 0) {
                    if (!cooling.isSelected(null)) {
                        if (company1.getSelectedIndex() != 0) {
                            price3 = price.getText();
                            if (!price3.equals("")) {

                                try {
                                    price2 = Integer.parseInt(price3);
                                    if (price2 > 0) {
                                        int rowCount = jTable1.getRowCount();                                        
                                        String a = "";
                                        //creating a linked list to store the if there is repeated value of the entered 
                                        LinkedList repeat = new LinkedList();
                                        for (int i = 0; i < rowCount; i++) {
                                            String model_number2 = jTable1.getValueAt(i, 0).toString().toLowerCase();
                                            if (model_number2.equals(model_number1)) {
                                                //adding repeated data in repeat linkedlist
                                                repeat.add(model_number2);
                                            }
                                        }
                                        //if there is no repeated data in the repeat list, data is added to the table
                                        if (repeat.size() == 0) {
                                            price1 = String.valueOf(price2);
                                            String cooling1;
                                            String displacement1 = displacement.getSelectedItem().toString();
                                            String company2 = company1.getSelectedItem().toString();
                                            if (coolAir.isSelected()) {
                                                cooling1 = coolAir.getText();
                                            } else if (coolLiquid.isSelected()) {
                                                cooling1 = coolLiquid.getText();
                                            } else {
                                                cooling1 = coolOil.getText();
                                            }
                                            String[] bikeDetails = {model_number1, model_name1, company2, displacement1, cooling1, price1};
                                            DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();
                                            Object[] add={null};
                                            
                                            model1.addRow(add);
                                            
                                            try{
                                                for (int i=0;i<bikeDetails.length;i++){
                                                    jTable1.setValueAt(bikeDetails[i], rowCount, i);
                                                }
                                            }
                                            catch(ArrayIndexOutOfBoundsException e){};
                                            JOptionPane.showMessageDialog(rootPane, model_name1 + " added successfully to the list. Thank you!", "   Bike Added", JOptionPane.INFORMATION_MESSAGE, icon_success);
                                        } else {
                                            JOptionPane.showMessageDialog(rootPane, "The bike of model number '" + model_number1 + "' already exist in the table", "    Duplicat entry!", JOptionPane.ERROR_MESSAGE);
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(rootPane, "The price of the bike should be greater than 0!", "    Negative value found", JOptionPane.ERROR_MESSAGE);
                                    }

                                } catch (NumberFormatException e) {
                                    JOptionPane.showMessageDialog(rootPane, "Please enter the price in number!", "    Wrong value of price", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "Please enter the price of the bike!", "    Price not found", JOptionPane.ERROR_MESSAGE);
                            }

                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Please select the company of bike!", "   Company not found", JOptionPane.WARNING_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Please select the cooling system of the bike!", "   Cooling System not found", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Please select the displacement of the bike!", "  Diplacement not found", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please enter the model name of the bike!", "   Model name not Found", JOptionPane.WARNING_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "Please enter the model number of the bike!", "    Model number not Found", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    
    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBarActionPerformed
       
    }//GEN-LAST:event_searchBarActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        //clearing all the text fields, combo box and radio button to default value
        model_num.setText("");
        model_name.setText("");
        price.setText("");
        displacement.setSelectedIndex(0);
        cooling.clearSelection();
        company1.setSelectedIndex(0);
        searchBar.setText("");
    }//GEN-LAST:event_btnClearActionPerformed


    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        String model_num2 = "";

        boolean loop = false;
        while (loop == false) {
            try {
                JTextField model_num3 = new JTextField();
                Object update[] = {"Enter the model Number", model_num3};
                int a = JOptionPane.showConfirmDialog(rootPane, update, "Update", JOptionPane.OK_CANCEL_OPTION);
                model_num2 = model_num3.getText().toLowerCase();                    
                if (a == JOptionPane.OK_OPTION) {

                    if (!model_num2.equals("")) {
                        JTextField model_name2 = new JTextField();
                        JTextField price2 = new JTextField();

                        JComboBox<String> displacement2 = new JComboBox<String>();
                        displacement2.addItem("100 CC");
                        displacement2.addItem("125 CC");
                        displacement2.addItem("150 CC");
                        displacement2.addItem("180 CC");
                        displacement2.addItem("200 CC");
                        displacement2.addItem("300 CC");
                        displacement2.addItem("400 CC");
                        displacement2.addItem("500 CC");

                        JComboBox<String> company2 = new JComboBox<String>();
                        company2.addItem("Suzuki");
                        company2.addItem("Honda");
                        company2.addItem("Bajaj");
                        company2.addItem("KTM");
                        company2.addItem("Benelli");
                        company2.addItem("BMW");
                        company2.addItem("Ducati");
                        company2.addItem("Yamaha");

                        ButtonGroup group = new ButtonGroup();
                        JRadioButton coolAir2 = new JRadioButton("Air Cooled");
                        JRadioButton coolOil2 = new JRadioButton("Oil Cooled");
                        JRadioButton coolLiquid2 = new JRadioButton("Liquid Cooled");
                        group.add(coolAir2);
                        group.add(coolOil2);
                        group.add(coolLiquid2);

                        Object[] update2 = {
                            "Model name", model_name2,
                            "Displacement", displacement2,
                            "Company", company2,
                            "Price", price2,
                            "Cooling System", coolAir2,
                            coolOil2,
                            coolLiquid2
                        };

                        try {
                            int rowCount = jTable1.getRowCount();
                            int colCount = jTable1.getColumnCount();
                            
                            for (int i = 0; i < rowCount; i++) {
                                String model = jTable1.getValueAt(i, 0).toString().toLowerCase();
                                if (model_num2.equals(model)) {
                                    int b = JOptionPane.showConfirmDialog(null, update2, " Update "+model, JOptionPane.OK_CANCEL_OPTION);
                                    
                                    if (b == JOptionPane.OK_OPTION) {
                                        String cooling3;
                                        if (coolAir2.isSelected()) {
                                            cooling3 = coolAir2.getText();
                                        } else if (coolLiquid2.isSelected()) {
                                            cooling3 = coolLiquid2.getText();
                                        } else {
                                            cooling3 = coolOil2.getText();
                                        }
                                        String[] bikeDetails = {model_num2, model_name2.getText(), company2.getSelectedItem().toString(), displacement2.getSelectedItem().toString(), cooling3, price2.getText()};

                                        for (int j = 0; j < colCount; j++) {
                                            jTable1.setValueAt(bikeDetails[j], i, j);
                                        }
                                        JOptionPane.showMessageDialog(rootPane, model_num2 + " was successfully updated!", " Sucessfully Updated!", JOptionPane.INFORMATION_MESSAGE, icon_success);
                                        loop = true;
                                    } else if (b == JOptionPane.CANCEL_OPTION) {
                                        JOptionPane.showMessageDialog(rootPane, "The Operation was cancelled.", "Cancel", JOptionPane.WARNING_MESSAGE);
                                        loop = true;                                       
                                    }
                                }
                                if (i == rowCount - 1 && !model_num2.equals(model)) {
                                    JOptionPane.showMessageDialog(rootPane, "Please enter the correct bike model number", "Model number not found", JOptionPane.ERROR_MESSAGE);

                                }
                            }
                        } catch (NullPointerException e) {
                        }
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Please enter the model number of the bike and try again", "Model number not found", JOptionPane.ERROR_MESSAGE);

                    }
                } else if (a == JOptionPane.CANCEL_OPTION) {
                    JOptionPane.showMessageDialog(rootPane, "The Operation was cancelled.", "Model number not found", JOptionPane.WARNING_MESSAGE);
                    break;
                }
            } catch (NullPointerException e) {
            };
        }


    }//GEN-LAST:event_btnUpdateActionPerformed

    private void priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceActionPerformed

    private void delete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete1ActionPerformed
        String model_num = "";
        boolean loop = false;

        while (loop == false) {
            try {
                JTextField model_num3 = new JTextField();
                Object delete[] = {"Enter the model Number", model_num3};
                int a = JOptionPane.showConfirmDialog(rootPane, delete, "Delete", JOptionPane.OK_CANCEL_OPTION);
                model_num = model_num3.getText().toLowerCase();

                if (a == JOptionPane.OK_OPTION) {
                    if (!model_num.equals("")) {

                        try {
                            int rowCount = jTable1.getRowCount();
                            int colCount = jTable1.getColumnCount();
                            
                            for (int i = 0; i < rowCount; i++) {
                                String model = jTable1.getValueAt(i, 0).toString().toLowerCase();

                                if (model_num.equals(model)) {
                                    DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();
                                    model1.removeRow(i);
                                    JOptionPane.showMessageDialog(rootPane, model_num + " successfully removed from the list!", " Sucessfully removed!", JOptionPane.INFORMATION_MESSAGE, icon_success);
                                    loop = true;
                                    break;

                                }

                                if (i == rowCount - 1) {
                                    JOptionPane.showMessageDialog(rootPane, "Please enter the correct bike model number", "Model number not found", JOptionPane.ERROR_MESSAGE);
                                    loop = false;

                                }
                            }

                        } catch (NullPointerException e) {
                        }
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Please enter the model number of the bike", "Model number not found", JOptionPane.ERROR_MESSAGE);
                        loop = false;

                    }
                } else if (a == JOptionPane.CANCEL_OPTION) {
                    JOptionPane.showMessageDialog(rootPane, "The Operation was cancelled.", "Model number not found", JOptionPane.WARNING_MESSAGE);
                    loop = true;
                }
            } catch (NullPointerException e) {
            }
        }

    }//GEN-LAST:event_delete1ActionPerformed

    private void displacementItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_displacementItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_displacementItemStateChanged

    StopWatch sw=new StopWatch();
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        
        if (!searchBar.getText().toString().equals("")) {
            try {
                int searches = Integer.parseInt(searchBar.getText().toString());
                if(searches>0){
                    int rowCount = jTable1.getRowCount();
                    int colCount = jTable1.getColumnCount();

                    String[][] a = new String[rowCount][colCount];
                    for (int i = 0; i < a.length; i++) {
                        String[] c = {jTable1.getValueAt(i, 0).toString(), jTable1.getValueAt(i, 1).toString(), jTable1.getValueAt(i, 2).toString(), jTable1.getValueAt(i, 3).toString(), jTable1.getValueAt(i, 4).toString(), jTable1.getValueAt(i, 5).toString()};
                        a[i] = c;
                    }

                    sw.start();
                    MergeSorter.sort(a);

                   
                    int mid = a.length / 2;
                    int low = 0;
                    int high = 0;
                    if (Integer.parseInt(a[mid - 1][5]) == searches) {
                        String[][] bike = new String[jTable1.getRowCount()][6];

                        String[] bike1 = {"Model number: " + a[mid - 1][0], "Model Name: " + a[mid - 1][1], "Company: " + a[mid - 1][2], "Displacement: " + a[mid - 1][3], "Cooling System: " + a[mid - 1][4], "Price: " + a[mid - 1][5], "**********************************"};

                        bike[0] = bike1;
                        for (int i = 1; i < jTable1.getRowCount() + 1; i++) {

                            if (Integer.parseInt(a[mid - 1 - i][5]) == searches) {

                                String[] bike2 = {"Model number: " + a[mid - 1 - i][0], "Model Name: " + a[mid - 1 - i][1], "Company: " + a[mid - 1 - i][2], "Displacement: " + a[mid - 1 - i][3], "Cooling System: " + a[mid - 1 - i][4], "Price: " + a[mid - 1 - i][5], "**********************************"};
                                bike[i] = bike2;

                            }
                            if (Integer.parseInt(a[mid + i][5]) == searches) {

                                String[] bike2 = {"Model number: " + a[mid - 1 + i][0], "Model Name: " + a[mid - 1 + i][1], "Company: " + a[mid - 1 + i][2], "Displacement: " + a[mid - 1 + i][3], "Cooling System: " + a[mid - 1 + i][4], "Price: " + a[mid - 1 + i][5], "**********************************"};
                                bike[i + 1] = bike2;
                            }
                            if (Integer.parseInt(a[mid + i][5]) != searches || Integer.parseInt(a[mid + i][5]) != searches) {
                                break;
                            }
                        }
                        

                        JOptionPane.showMessageDialog(null, bike, " Found by price!", JOptionPane.INFORMATION_MESSAGE);

                    } else {
                        if (searches < Integer.parseInt(a[mid - 1][5])) {
                            low = 0;
                            high = mid - 1;
                        } else if (searches > Integer.parseInt(a[mid - 1][5])) {
                            low = mid - 1;
                            high = a.length;
                            
                        }

                        MotoRacers mr = new MotoRacers();
                        mr.search(a, low, high, searches);
                        sw.stop();

                    }
                }
                else{
                    JOptionPane.showMessageDialog(rootPane, "The price should be greater that 0", "Search data error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane, "Please enter the price to be searched in number", "Search data error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please enter the price to be searched", "Searching price not found!", JOptionPane.ERROR_MESSAGE);
        }
        
        JOptionPane.showMessageDialog(null,"Found in: "+sw.getElapsedTime()+"milliseconds","Time Elapsed!", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void itemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemOpenActionPerformed
        try {

		if ((new File("file\\documentation.pdf")).exists()) {

			Process p = Runtime
			   .getRuntime()
			   .exec("rundll32 url.dll,FileProtocolHandler file\\documentation.pdf");
			p.waitFor();
				
		} else {

			System.out.println("File is not exists");

		}

		

  	  } catch (Exception ex) {
		ex.printStackTrace();
	  }
    }//GEN-LAST:event_itemOpenActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void companyCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_companyCmbActionPerformed
        filter();       
        
    }//GEN-LAST:event_companyCmbActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void menuHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuHelpActionPerformed
        try {

		if ((new File("file\\user_guide.pdf")).exists()) {

			Process p = Runtime
			   .getRuntime()
			   .exec("rundll32 url.dll,FileProtocolHandler file\\user_guide.pdf");
			p.waitFor();
				
		} else {

			System.out.println("File is not exists");

		}

		

  	  } catch (Exception ex) {
		ex.printStackTrace();
	  }
    }//GEN-LAST:event_menuHelpActionPerformed

    private void itemexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemexitActionPerformed
        System.exit(0);        // TODO add your handling code here:
    }//GEN-LAST:event_itemexitActionPerformed
    
    protected void filter() {
        int value=companyCmb.getSelectedIndex();
        String value1=companyCmb.getSelectedItem().toString();
        try{
            TableRowSorter<DefaultTableModel> sorter =new TableRowSorter<DefaultTableModel> ((DefaultTableModel) jTable1.getModel());
            jTable1.setRowSorter(sorter);
            if(value!=0){
                sorter.setRowFilter(RowFilter.regexFilter(value1,2));
                int count=0;
                String company=companyCmb.getSelectedItem().toString();
                for(int i=0;i<jTable1.getRowCount();i++){
                    if(jTable1.getValueAt(i,2).toString().equals(company)){
                    count++;
                }
                
        }
        JOptionPane.showMessageDialog(rootPane,count +" bikes found by "+company,"Found by Company!", JOptionPane.INFORMATION_MESSAGE);
                
            }
            
            
        }
        catch(PatternSyntaxException e){};
        //catch(NullPointerException e){}; 
        
    }
        public int search(String[][] a, int low, int high, int value) {
        sw.start();
        if (low <= high) {
            System.out.println("less than");
            int mid = (low + high) / 2;
            int price1 = 0;
            try {
                price1 = Integer.parseInt(a[mid][5]);
            } catch (ArrayIndexOutOfBoundsException e) {
            }
            if (price1 == value) {
                
                String[][] bike = new String[jTable1.getRowCount()][6];

                String[] bike1 = {"Model number: " + a[mid][0], "Model Name: " + a[mid][1], "Company: " + a[mid][2], "Displacement: " + a[mid][3], "Cooling System: " + a[mid][4], "Price: " + a[mid][5], "**********************************"};
                
                bike[0] = bike1;
                for (int i = 1; i < jTable1.getRowCount() - 1; i++) {
                    try {
                        if (Integer.parseInt(a[mid - i][5]) == value) {
                            
                            String[] bike2 = {"Model number: " + a[mid - i][0], "Model Name: " + a[mid - i][1], "Company: " + a[mid - i][2], "Displacement: " + a[mid - i][3], "Cooling System: " + a[mid - i][4], "Price: " + a[mid - i][5], "**********************************"};
                            bike[i] = bike2;

                        }

                        if (Integer.parseInt(a[mid + i][5]) == value) {
                            
                            String[] bike2 = {"Model number: " + a[mid + i][0], "Model Name: " + a[mid + i][1], "Company: " + a[mid + i][2], "Displacement: " + a[mid + i][3], "Cooling System: " + a[mid + i][4], "Price: " + a[mid + i][5], "**********************************"};
                            bike[i + 1] = bike2;
                        }

                        if (Integer.parseInt(a[mid + i][5]) != value || Integer.parseInt(a[mid + i][5]) != value) {
                            break;
                        }
                    } catch (ArrayIndexOutOfBoundsException e) {
                    };
                }
                
                JOptionPane.showMessageDialog(null, bike, " Found by price!", JOptionPane.INFORMATION_MESSAGE);
                
                return mid;
            } else if (price1 < value) {
                return search(a, mid + 1, high, value);
            } else {
                return search(a, low, mid - 1, value);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No bike of price " + value + " was found", " Found by price!", JOptionPane.ERROR_MESSAGE);
            return -1;
        }

    }

    /**
     * @param args the command line arguments
    */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MotoRacers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MotoRacers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MotoRacers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MotoRacers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MotoRacers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> company1;
    private javax.swing.JComboBox<String> companyCmb;
    private javax.swing.JRadioButton coolAir;
    private javax.swing.JRadioButton coolLiquid;
    private javax.swing.JRadioButton coolOil;
    private javax.swing.ButtonGroup cooling;
    private javax.swing.JButton delete1;
    private javax.swing.JComboBox<String> displacement;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenuItem itemOpen;
    private javax.swing.JMenuItem itemexit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JMenuItem menuHelp;
    private javax.swing.JTextField model_name;
    private javax.swing.JTextField model_num;
    private javax.swing.JTextField price;
    private javax.swing.JTextField searchBar;
    // End of variables declaration//GEN-END:variables
}
